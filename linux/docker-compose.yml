# Docker Compose file for TurtleBot2 API on WSL

services:
  # TurtleBot2 base node (kobuki)
  kobuki:
    build:
      context: .
      dockerfile: Dockerfile
    image: turtlebot2_api:latest
    container_name: turtlebot2_kobuki
    # Use bridge network for WSL
    networks:
      - ros_net
    # Mount the device
    devices:
      - /dev/kobuki:/dev/kobuki  # Update this path if your device is at a different location
    # Use dynamic launch command that will find the right kobuki launch file
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash &&
              export KOBUKI_LAUNCH=$$(find /opt/ros2_ws/install -name '*kobuki*.launch.py' | head -1) &&
              if [ -n \"$$KOBUKI_LAUNCH\" ]; then
                echo \"Launching Kobuki with $$KOBUKI_LAUNCH\" &&
                export PKG_NAME=$$(echo $$KOBUKI_LAUNCH | sed -E 's|.*/install/([^/]+)/.*|\\1|') &&
                export LAUNCH_FILE=$$(basename $$KOBUKI_LAUNCH) &&
                ros2 launch $$PKG_NAME $$LAUNCH_FILE;
              else
                echo \"No Kobuki launch file found, looking for other options...\" &&
                export ANY_LAUNCH=$$(find /opt/ros2_ws/install -path '*/launch/*' -name '*.py' | head -1) &&
                if [ -n \"$$ANY_LAUNCH\" ]; then
                  echo \"Trying launch file: $$ANY_LAUNCH\" &&
                  export PKG_NAME=$$(echo $$ANY_LAUNCH | sed -E 's|.*/install/([^/]+)/.*|\\1|') &&
                  export LAUNCH_FILE=$$(basename $$ANY_LAUNCH) &&
                  ros2 launch $$PKG_NAME $$LAUNCH_FILE;
                else
                  echo \"No launch files found. Starting Kobuki manually...\" &&
                  export KOBUKI_NODE=$$(ros2 pkg list | grep -i kobuki | head -1) &&
                  if [ -n \"$$KOBUKI_NODE\" ]; then
                    ros2 run $$KOBUKI_NODE kobuki_node;
                  else
                    echo \"No Kobuki packages found at all!\" && exit 1;
                  fi;
                fi;
              fi"
    restart: on-failure
    environment:
      - ROS_DOMAIN_ID=0

  # Debugging service to help identify packages and launch files
  debug:
    image: turtlebot2_api:latest
    container_name: turtlebot2_debug
    networks:
      - ros_net
    volumes:
      - .:/app
    tty: true
    stdin_open: true
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash && 
              echo 'Available packages:' && 
              ros2 pkg list | grep -i kobuki && 
              echo 'Available launch files:' && 
              find /opt/ros2_ws/install -name '*.launch.py' 2>/dev/null && 
              find /opt/ros2_ws/install -path '*/launch/*' -name '*.py' 2>/dev/null && 
              echo 'Entering debug shell...' && 
              bash"
    environment:
      - ROS_DOMAIN_ID=0

  # Safety controller for obstacle avoidance
  safety:
    image: turtlebot2_api:latest
    container_name: turtlebot2_safety
    networks:
      - ros_net
    depends_on:
      - kobuki
    # Dynamic launch command for safety controller
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash && 
              sleep 5 && # Wait for kobuki to start
              export SAFETY_LAUNCH=$$(find /opt/ros2_ws/install -name '*safety*.launch.py' | head -1) &&
              if [ -n \"$$SAFETY_LAUNCH\" ]; then
                echo \"Launching Safety Controller with $$SAFETY_LAUNCH\" &&
                export PKG_NAME=$$(echo $$SAFETY_LAUNCH | sed -E 's|.*/install/([^/]+)/.*|\\1|') &&
                export LAUNCH_FILE=$$(basename $$SAFETY_LAUNCH) &&
                ros2 launch $$PKG_NAME $$LAUNCH_FILE;
              else
                echo \"No safety controller launch file found\" &&
                sleep infinity;
              fi"
    restart: on-failure
    environment:
      - ROS_DOMAIN_ID=0

  # Our API service
  api:
    image: turtlebot2_api:latest
    container_name: turtlebot2_api
    networks:
      - ros_net
    volumes:
      - .:/app  # Mount the current directory for development
    depends_on:
      - kobuki
    # Wait for the robot to initialize before starting
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash && 
              echo 'Waiting for robot to initialize...' && 
              sleep 10 && 
              python3 turtlebot2_example.py"
    environment:
      - ROS_DOMAIN_ID=0

  # Shell service for interactive development
  shell:
    image: turtlebot2_api:latest
    container_name: turtlebot2_shell
    networks:
      - ros_net
    volumes:
      - .:/app  # Mount the current directory
    depends_on:
      - kobuki
    stdin_open: true
    tty: true
    command: bash
    environment:
      - ROS_DOMAIN_ID=0

# Define the custom network
networks:
  ros_net:
    driver: bridge