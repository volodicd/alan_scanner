# Docker Compose file for TurtleBot2 API on WSL with correct device mapping

services:
  # TurtleBot2 base node (kobuki)
  kobuki:
    build:
      context: .
      dockerfile: Dockerfile
    image: turtlebot2_api:latest
    container_name: turtlebot2_kobuki
    # Use bridge network for WSL
    networks:
      - ros_net
    # Mount the device at the correct path
    devices:
      - /dev/kobuki:/dev/kobuki  # Use the actual USB device path
    # Use the correct launch file as per official guide
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash &&
              ros2 launch kobuki_node kobuki_node-launch.py"
    restart: on-failure
    environment:
      - ROS_DOMAIN_ID=0

  # Teleop service for keyboard control
  teleop:
    image: turtlebot2_api:latest
    container_name: turtlebot2_teleop
    networks:
      - ros_net
    depends_on:
      - kobuki
    tty: true
    stdin_open: true
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash && 
              sleep 5 && # Wait for kobuki to start
              ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args --remap cmd_vel:=commands/velocity"
    environment:
      - ROS_DOMAIN_ID=0

  # Debugging service to help identify packages and launch files
  debug:
    image: turtlebot2_api:latest
    container_name: turtlebot2_debug
    networks:
      - ros_net
    volumes:
      - .:/app
    devices:
      - /dev/kobuki:/dev/kobuki  # Also add device to debug container
    tty: true
    stdin_open: true
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash && 
              echo 'Available packages:' && 
              ros2 pkg list | grep -i kobuki && 
              echo 'Available launch files:' && 
              find /opt/ros2_ws/install -name '*.launch.py' 2>/dev/null && 
              find /opt/ros2_ws/install -path '*/launch/*' -name '*.py' 2>/dev/null && 
              echo 'Entering debug shell...' && 
              bash"
    environment:
      - ROS_DOMAIN_ID=0

  # Our API service
  api:
    image: turtlebot2_api:latest
    container_name: turtlebot2_api
    networks:
      - ros_net
    volumes:
      - .:/app  # Mount the current directory for development
    depends_on:
      - kobuki
    # Wait for the robot to initialize before starting
    command: >
      bash -c "source /opt/ros/humble/setup.bash && source /opt/ros2_ws/install/setup.bash && 
              echo 'Waiting for robot to initialize...' && 
              sleep 10 && 
              python3 turtlebot2_example.py"
    environment:
      - ROS_DOMAIN_ID=0

  # Shell service for interactive development
  shell:
    image: turtlebot2_api:latest
    container_name: turtlebot2_shell
    networks:
      - ros_net
    volumes:
      - .:/app  # Mount the current directory
    devices:
      - /dev/kobuki:/dev/kobuki  # Also add device to shell container
    depends_on:
      - kobuki
    stdin_open: true
    tty: true
    command: bash
    environment:
      - ROS_DOMAIN_ID=0

# Define the custom network
networks:
  ros_net:
    driver: bridge